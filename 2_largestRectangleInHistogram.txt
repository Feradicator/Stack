class Solution {
   

    public int largestRectangleArea(int[] arr) {
        ArrayList<Integer>list1=NSL(arr,arr.length);
        ArrayList<Integer>list2=NSR(arr,arr.length);
        ArrayList<Integer>list3=new ArrayList<Integer>();
        for(int i=0;i<arr.length;i++)
        {
            list3.add((list2.get(i)-list1.get(i)-1)*arr[i]);
        }
        int maxi=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++)
        {
            maxi=Math.max(maxi,list3.get(i));
        }
        return maxi;


  
    }
    public ArrayList<Integer> NSL(int[] arr,int n)
    {
        ArrayList<Integer>list=new ArrayList<Integer>();
        Stack<List<Integer>>st=new Stack<>();
        for(int i=0;i<n;i++)
        {
            if(st.size()==0)
            {
                list.add(-1);
            }
            
            else if(st.peek().get(0)<arr[i])
            {
                list.add(st.peek().get(1));
            }
            else
            {
                while(st.size()!=0 && st.peek().get(0)>=arr[i])
                {
                    st.pop();

                }
                if(st.size()!=0 && st.peek().get(0)<arr[i] )
                {
                    list.add(st.peek().get(1));
                }
                if(st.size()==0)
                list.add(-1);
            }
            st.push(Arrays.asList(arr[i],i));
        }
        return list;
    }
    public ArrayList<Integer> NSR(int[] arr,int n)
    {
        ArrayList<Integer>list=new ArrayList<Integer>();
        Stack<List<Integer>>st=new Stack<>();
        for(int i=n-1;i>=0;i--)
        {
            if(st.size()==0)
            {
                list.add(n);
            }
            
            else if(st.peek().get(0)<arr[i])
            {
                list.add(st.peek().get(1));
            }
            else
            {
                while(st.size()!=0 && st.peek().get(0)>=arr[i])
                {
                    st.pop();

                }
                if(st.size()!=0 && st.peek().get(0)<arr[i] )
                {
                    list.add(st.peek().get(1));
                }
                if(st.size()==0)
                list.add(n);
            }
            st.push(Arrays.asList(arr[i],i));
        }
        Collections.reverse(list);
        return list;
    }
}